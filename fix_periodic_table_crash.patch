 From 6889e2b2d9571ce8f7c4d7e9a6a0731c54817842 Mon Sep 17 00:00:00 2001
From: Julian-Hochhaus# <julian.hochhaus@tu-dortmund.de>
Date: Thu, 20 Jul 2023 17:31:13 +0200
Subject: [PATCH] solves #84

---
 Python/main.py          | 25 ++++++++++++-------------
 Python/periodictable.py |  1 -
 2 files changed, 12 insertions(+), 14 deletions(-)

diff --git a/Python/main.py b/Python/main.py
index 10c59c1..5f60cac 100755
--- a/Python/main.py
+++ b/Python/main.py
@@ -1867,30 +1867,30 @@ def plot_pt(self):
             xmin, xmax = self.ax.get_xlim()
             for obj in self.pt.selected_elements:
                 alka = ast.literal_eval(obj['alka'].values[0])
-                if len(alka['trans']) > 0:
-                    for orb in range(len(alka['trans'])):
+                if len(ast.literal_eval(alka['trans'])) > 0:
+                    for orb in range(len(ast.literal_eval(alka['trans']))):
                         if xmin > xmax:
-                            en = float(alka['be'][orb])
+                            en = float(ast.literal_eval(alka['be'])[orb])
                         else:
-                            en = hv - wf - float(alka['be'][orb])-self.correct_energy
+                            en = hv - wf - float(ast.literal_eval(alka['be'])[orb])-self.correct_energy
                         if (xmin > xmax and xmin > en > xmax) or (xmin < xmax and xmin < en < xmax):
                             elem_x = np.asarray([en])
-                            elem_y = np.asarray([float(alka['rsf'][orb])])
-                            elem_z = alka['trans'][orb]
+                            elem_y = np.asarray([float(ast.literal_eval(alka['rsf'])[orb])])
+                            elem_z =ast.literal_eval(alka['trans'])[orb]
                             # obj.symbol+elem_z, color="r", rotation="vertical")
                             self.ax.text(elem_x, ymin + (ymax - ymin) * math.log(elem_y + 1, 10) / 2,
                                          obj['symbol'].values[0] + elem_z, color="r", rotation="vertical")
                 aes = ast.literal_eval(obj['aes'].values[0])
-                if len(aes['trans']) > 0:
-                    for orb in range(len(aes['trans'])):
+                if len(ast.literal_eval(aes['trans'])) > 0:
+                    for orb in range(len(ast.literal_eval(aes['trans']))):
                         if xmin > xmax:
-                            en = hv - wf - float(aes['ke'][orb])-self.correct_energy
+                            en = hv - wf - float(ast.literal_eval(aes['ke'])[orb])-self.correct_energy
                         else:
-                            en = float(aes['ke'][orb])
+                            en = float(ast.literal_eval(aes['ke'])[orb])
                         if (xmin > xmax and xmin > en > xmax) or (xmin < xmax and xmin < en < xmax):
                             elem_x = np.asarray([en])
-                            elem_y = np.asarray([float(aes['rsf'][orb])])
-                            elem_z = aes['trans'][orb]
+                            elem_y = np.asarray([float(ast.literal_eval(aes['rsf'])[orb])])
+                            elem_z = ast.literal_eval(aes['trans'])[orb]
                             # obj.symbol+elem_z, color="g", rotation="vertical")
                             self.ax.text(elem_x, ymin + (ymax - ymin) * math.log(elem_y + 1, 10),
                                          obj['symbol'].values[0] + elem_z,
@@ -3234,7 +3234,6 @@ def fitting_finished(self, out, x, y, strmode, mode, zeros_in_data, pars, raw_x,
         self.fillTabResults(x, y, out)
         # Fit stats to GUI:
         if mode == 'eva' or mode == "sim":
-            print('pre', self.pre[2][0])
             #for index_pk in range(int(len(self.pre[2][0]))):
             #    item = QtWidgets.QTableWidgetItem('Evaluation mode')
             #    self.res_tab.setItem(0, index_pk, item)
diff --git a/Python/periodictable.py b/Python/periodictable.py
index 5b48a74..8374e9e 100644
--- a/Python/periodictable.py
+++ b/Python/periodictable.py
@@ -78,7 +78,6 @@ def toggleElementSelection(self, element):
         if element['symbol'].values[0] in self.selected_elements_names:
             self.selected_elements_names.remove(element['symbol'].values[0])
             self.selected_elements.remove(element)
-            print(self.selected_elements_names)
         else:
             self.selected_elements.append(element)
             self.selected_elements_names.append(element['symbol'].values[0])

